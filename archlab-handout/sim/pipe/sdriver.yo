                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6f800000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c800000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin revcopy-ys */
                            | ##################################################################
                            | # revcopy.ys
                            | #
                            | # Copy a src block of len words to dst in reverse order.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Ali MAMMADOV, ali.mammadov
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # First step is implementing IADDQ, which will optimize our program
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax		      # count = 0;
0x034: 6222                 | 	andq %rdx, %rdx		      # len <= 0?
0x036: 71c500000000000000   | 	jle Done		            # if so, goto Done:
                            | 
0x03f: 202b                 |  	rrmovq %rdx, %r11       # r11 = len
0x041: c0fbffffffffffffffff | 	iaddq  $-1,  %r11       # r11--
                            | 	
0x04b:                      | Init:
0x04b: 62bb                 |  	andq   %r11, %r11		    # r11 <= 0?
0x04d: 717300000000000000   | 	jle Loop		            # if so, goto Loop:
0x056: c0f60800000000000000 | 	iaddq  $8,   %rsi       # dst++
0x060: c0fbffffffffffffffff | 	iaddq  $-1,  %r11       # r11--
0x06a: 704b00000000000000   | 	jmp Init
                            | 
0x073:                      | Loop:	
0x073: 50a70000000000000000 |   mrmovq (%rdi), %r10	    # read val from src...
0x07d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	    # ...and store it to dst
0x087: 62aa                 | 	andq %r10, %r10		      # val <= 0?
0x089: 719c00000000000000   | 	jle Npos		            # if so, goto Npos:
0x092: c0f00100000000000000 | 	iaddq  $1, %rax		      # count++
                            | 
0x09c:                      | Npos:
0x09c: c0f2ffffffffffffffff | 	iaddq  $-1,  %rdx		    # len--
0x0a6: c0f70800000000000000 | 	iaddq  $8,   %rdi		    # src++
0x0b0: c0f6f8ffffffffffffff | 	iaddq  $-8,  %rsi		    # dst--
0x0ba: 6222                 | 	andq   %rdx, %rdx		    # len > 0?
0x0bc: 767300000000000000   | 	jg Loop			            # if so, goto Loop:
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0c5:                      | Done:
0x0c5: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0c6:                      | End:
                            | #/* $end revcopy-ys */
0x0c6:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x0c8:                      | 	.align 8
0x0c8:                      | src:
0x0c8: ffffffffffffffff     | 	.quad -1
0x0d0: feffffffffffffff     | 	.quad -2
0x0d8: 0300000000000000     | 	.quad 3
0x0e0: 0400000000000000     | 	.quad 4
0x0e8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x0f0:                      | 	.align 16
0x0f0:                      | Predest:
0x0f0: fadebc0000000000     | 	.quad 0xbcdefa
0x0f8:                      | dest:
0x0f8: abefcd0000000000     | 	.quad 0xcdefab
0x100: abefcd0000000000     | 	.quad 0xcdefab
0x108: abefcd0000000000     | 	.quad 0xcdefab
0x110: abefcd0000000000     | 	.quad 0xcdefab
0x118:                      | Postdest:
0x118: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x120:                      | .align 8
                            | # Run time stack
0x120: 0000000000000000     | 	.quad 0
0x128: 0000000000000000     | 	.quad 0
0x130: 0000000000000000     | 	.quad 0
0x138: 0000000000000000     | 	.quad 0
0x140: 0000000000000000     | 	.quad 0
0x148: 0000000000000000     | 	.quad 0
0x150: 0000000000000000     | 	.quad 0
0x158: 0000000000000000     | 	.quad 0
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
                            | 
0x1a0:                      | Stack:
