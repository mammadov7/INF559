#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin revcopy-ys */
##################################################################
# revcopy.ys
#
# Copy a src block of len words to dst in reverse order.
# Return the number of positive words (>0) contained in src.
#
# Ali MAMMADOV, ali.mammadov
#
# Describe how and why you modified the baseline code.
#
# First step is implementing IADDQ, which will optimize our program
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax, %rax		      # count = 0;
	andq %rdx, %rdx		      # len <= 0?
	jle Done		            # if so, goto Done:

 	rrmovq %rdx, %r11       # r11 = len
	iaddq  $-1,  %r11       # r11--
	
Init:
 	andq   %r11, %r11		    # r11 <= 0?
	jle Loop		            # if so, goto Loop:
	iaddq  $8,   %rsi       # dst++
	iaddq  $-1,  %r11       # r11--
	jmp Init

Loop:	
  mrmovq (%rdi), %r10	    # read val from src...
	rmmovq %r10, (%rsi)	    # ...and store it to dst
	andq %r10, %r10		      # val <= 0?
	jle Npos		            # if so, goto Npos:
	iaddq  $1, %rax		      # count++

Npos:
	iaddq  $-1,  %rdx		    # len--
	iaddq  $8,   %rdi		    # src++
	iaddq  $-8,  %rsi		    # dst--
	andq   %rdx, %rdx		    # len > 0?
	jg Loop			            # if so, goto Loop:

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end revcopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
