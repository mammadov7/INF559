                            | #######################################################################
                            | # Test for copying block of size 0xaaaa;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2aaaa000000000000 | 	irmovq $0xaaaa, %rdx		# src and dst have 0xaaaa elements
0x014: 30f65802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f74802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80cf00000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin revcopy-ys */
                            | ##################################################################
                            | # revcopy.ys
                            | #
                            | # Copy a src block of len words to dst in reverse order.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Ali MAMMADOV, ali.mammadov
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # First step is implementing IADDQ, which will optimize our program
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax, %rax		      # count = 0;
0x03d: 6222                 | 	andq %rdx, %rdx		      # len <= 0?
0x03f: 71ce00000000000000   | 	jle Done		            # if so, goto Done:
                            | 
0x048: 202b                 |  	rrmovq %rdx, %r11       # r11 = len
0x04a: c0fbffffffffffffffff | 	iaddq  $-1,  %r11       # r11--
                            | 	
0x054:                      | Init:
0x054: 62bb                 |  	andq   %r11, %r11		    # r11 <= 0?
0x056: 717c00000000000000   | 	jle Loop		            # if so, goto Loop:
0x05f: c0f60800000000000000 | 	iaddq  $8,   %rsi       # dst++
0x069: c0fbffffffffffffffff | 	iaddq  $-1,  %r11       # r11--
0x073: 705400000000000000   | 	jmp Init
                            | 
0x07c:                      | Loop:	
0x07c: 50a70000000000000000 |   mrmovq (%rdi), %r10	    # read val from src...
0x086: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	    # ...and store it to dst
0x090: 62aa                 | 	andq %r10, %r10		      # val <= 0?
0x092: 71a500000000000000   | 	jle Npos		            # if so, goto Npos:
0x09b: c0f00100000000000000 | 	iaddq  $1, %rax		      # count++
                            | 
0x0a5:                      | Npos:
0x0a5: c0f2ffffffffffffffff | 	iaddq  $-1,  %rdx		    # len--
0x0af: c0f70800000000000000 | 	iaddq  $8,   %rdi		    # src++
0x0b9: c0f6f8ffffffffffffff | 	iaddq  $-8,  %rsi		    # dst--
0x0c3: 6222                 | 	andq   %rdx, %rdx		    # len > 0?
0x0c5: 767c00000000000000   | 	jg Loop			            # if so, goto Loop:
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0ce:                      | Done:
0x0ce: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0cf:                      | End:
                            | #/* $end revcopy-ys */
0x0cf:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x0cf:                      | check:
                            | 	# Return value test
0x0cf: 30fa0000000000000000 | 	irmovq $0,%r10
0x0d9: 61a0                 | 	subq %r10,%rax
0x0db: 73f700000000000000   | 	je checkb
0x0e4: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x0ee: 704102000000000000   | 	jmp cdone
0x0f7:                      | checkb:
                            | 	# Code length check
0x0f7: 30f0cf00000000000000 | 	irmovq EndFun,%rax
0x101: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x10b: 6120                 | 	subq %rdx,%rax
0x10d: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x117: 6102                 | 	subq %rax,%rdx
0x119: 753501000000000000   | 	jge checkm
0x122: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x12c: 704102000000000000   | 	jmp cdone
0x135:                      | checkm:
0x135: 30f25802000000000000 | 	irmovq Postdest, %rdx
0x13f: 30f00800000000000000 | 	irmovq $8, %rax
0x149: 6102                 | 	subq %rax, %rdx   # Pointer to last destination location
0x14b: 30f34802000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x155: 30f7aaaa000000000000 | 	irmovq $0xaaaa,%rdi    # Count
0x15f: 6277                 | 	andq %rdi,%rdi
0x161: 73bf01000000000000   | 	je checkpre       # Skip check if count = 0
0x16a:                      | mcloop:
0x16a: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x174: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x17e: 6160                 | 	subq %rsi,%rax
0x180: 739c01000000000000   | 	je  mok
0x189: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x193: 704102000000000000   | 	jmp cdone
0x19c:                      | mok:
0x19c: 30f00800000000000000 | 	irmovq $8,%rax
0x1a6: 6102                 | 	subq %rax,%rdx	  # dest ++
0x1a8: 6003                 | 	addq %rax,%rbx    # src++
0x1aa: 30f00100000000000000 | 	irmovq $1,%rax
0x1b4: 6107                 | 	subq %rax,%rdi    # cnt--
0x1b6: 766a01000000000000   | 	jg mcloop
0x1bf:                      | checkpre:
                            | 	# Check for corruption
0x1bf: 30f25002000000000000 | 	irmovq Predest,%rdx
0x1c9: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x1d3: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x1dd: 6120                 | 	subq %rdx,%rax
0x1df: 73fb01000000000000   | 	je checkpost
0x1e8: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x1f2: 704102000000000000   | 	jmp cdone
0x1fb:                      | checkpost:
                            | 	# Check for corruption
0x1fb: 30f25802000000000000 | 	irmovq Postdest,%rdx
0x205: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x20f: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x219: 6120                 | 	subq %rdx,%rax
0x21b: 733702000000000000   | 	je checkok
0x224: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x22e: 704102000000000000   | 	jmp cdone
0x237:                      | checkok:
                            | 	# Successful checks
0x237: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x241:                      | cdone:
0x241: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x248:                      | 	.align 8
0x248:                      | src:
0x248: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x250:                      | 	.align 16
0x250:                      | Predest:
0x250: fadebc0000000000     | 	.quad 0xbcdefa
0x258:                      | dest:
0x258:                      | Postdest:
0x258: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x260:                      | .align 8
                            | # Run time stack
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
                            | 
0x2e0:                      | Stack:
