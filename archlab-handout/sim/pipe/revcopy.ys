#/* $begin revcopy-ys */
##################################################################
# revcopy.ys
#
# Copy a src block of len words to dst in reverse order.
# Return the number of positive words (>0) contained in src.
#
# Ali MAMMADOV, ali.mammadov
#
# Describe how and why you modified the baseline code.
#
# First step is implementing IADDQ, which will optimize our program
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax, %rax	        # count = 0;
	andq %rdx, %rdx	        # len <= 0?
	jle Done                # if so, goto Done:

 	rrmovq %rdx, %r11       # r11 = len
	iaddq  $-1,  %r11       # r11--
	
Init:
 	andq   %r11, %r11       # r11 <= 0?
	jle Loop                # if so, goto Loop:
	iaddq  $8,   %rsi       # dst++
	iaddq  $-1,  %r11       # r11--
	jmp Init

Loop:	
   	mrmovq (%rdi), %r10     # read val from src...
	rmmovq %r10, (%rsi)     # ...and store it to dst
	andq %r10, %r10	        # val <= 0?
	jle Npos                # if so, goto Npos:
	iaddq  $1, %rax	        # count++

Npos:
	iaddq  $-1,  %rdx       # len--
	iaddq  $8,   %rdi       # src++
	iaddq  $-8,  %rsi       # dst--
	andq   %rdx, %rdx       # len > 0?
	jg Loop	                # if so, goto Loop:

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end revcopy-ys */
