                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6d802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c800000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin revcopy-ys */
                            | ##################################################################
                            | # revcopy.ys
                            | #
                            | # Copy a src block of len words to dst in reverse order.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Ali MAMMADOV, ali.mammadov
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # First step is implementing IADDQ, which will optimize our program
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax		      # count = 0;
0x034: 6222                 | 	andq %rdx, %rdx		      # len <= 0?
0x036: 71c500000000000000   | 	jle Done		            # if so, goto Done:
                            | 
0x03f: 202b                 |  	rrmovq %rdx, %r11       # r11 = len
0x041: c0fbffffffffffffffff | 	iaddq  $-1,  %r11       # r11--
                            | 	
0x04b:                      | Init:
0x04b: 62bb                 |  	andq   %r11, %r11		    # r11 <= 0?
0x04d: 717300000000000000   | 	jle Loop		            # if so, goto Loop:
0x056: c0f60800000000000000 | 	iaddq  $8,   %rsi       # dst++
0x060: c0fbffffffffffffffff | 	iaddq  $-1,  %r11       # r11--
0x06a: 704b00000000000000   | 	jmp Init
                            | 
0x073:                      | Loop:	
0x073: 50a70000000000000000 |   mrmovq (%rdi), %r10	    # read val from src...
0x07d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	    # ...and store it to dst
0x087: 62aa                 | 	andq %r10, %r10		      # val <= 0?
0x089: 719c00000000000000   | 	jle Npos		            # if so, goto Npos:
0x092: c0f00100000000000000 | 	iaddq  $1, %rax		      # count++
                            | 
0x09c:                      | Npos:
0x09c: c0f2ffffffffffffffff | 	iaddq  $-1,  %rdx		    # len--
0x0a6: c0f70800000000000000 | 	iaddq  $8,   %rdi		    # src++
0x0b0: c0f6f8ffffffffffffff | 	iaddq  $-8,  %rsi		    # dst--
0x0ba: 6222                 | 	andq   %rdx, %rdx		    # len > 0?
0x0bc: 767300000000000000   | 	jg Loop			            # if so, goto Loop:
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0c5:                      | Done:
0x0c5: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0c6:                      | End:
                            | #/* $end revcopy-ys */
0x0c6:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x0c8:                      | 	.align 8
0x0c8:                      | src:
0x0c8: 0100000000000000     | 	.quad 1
0x0d0: 0200000000000000     | 	.quad 2
0x0d8: fdffffffffffffff     | 	.quad -3
0x0e0: fcffffffffffffff     | 	.quad -4
0x0e8: fbffffffffffffff     | 	.quad -5
0x0f0: faffffffffffffff     | 	.quad -6
0x0f8: 0700000000000000     | 	.quad 7
0x100: f8ffffffffffffff     | 	.quad -8
0x108: f7ffffffffffffff     | 	.quad -9
0x110: 0a00000000000000     | 	.quad 10
0x118: f5ffffffffffffff     | 	.quad -11
0x120: 0c00000000000000     | 	.quad 12
0x128: f3ffffffffffffff     | 	.quad -13
0x130: f2ffffffffffffff     | 	.quad -14
0x138: 0f00000000000000     | 	.quad 15
0x140: 1000000000000000     | 	.quad 16
0x148: efffffffffffffff     | 	.quad -17
0x150: eeffffffffffffff     | 	.quad -18
0x158: 1300000000000000     | 	.quad 19
0x160: ecffffffffffffff     | 	.quad -20
0x168: ebffffffffffffff     | 	.quad -21
0x170: 1600000000000000     | 	.quad 22
0x178: e9ffffffffffffff     | 	.quad -23
0x180: e8ffffffffffffff     | 	.quad -24
0x188: 1900000000000000     | 	.quad 25
0x190: e6ffffffffffffff     | 	.quad -26
0x198: 1b00000000000000     | 	.quad 27
0x1a0: e4ffffffffffffff     | 	.quad -28
0x1a8: e3ffffffffffffff     | 	.quad -29
0x1b0: e2ffffffffffffff     | 	.quad -30
0x1b8: e1ffffffffffffff     | 	.quad -31
0x1c0: 2000000000000000     | 	.quad 32
0x1c8: 2100000000000000     | 	.quad 33
0x1d0: deffffffffffffff     | 	.quad -34
0x1d8: ddffffffffffffff     | 	.quad -35
0x1e0: 2400000000000000     | 	.quad 36
0x1e8: dbffffffffffffff     | 	.quad -37
0x1f0: daffffffffffffff     | 	.quad -38
0x1f8: d9ffffffffffffff     | 	.quad -39
0x200: d8ffffffffffffff     | 	.quad -40
0x208: 2900000000000000     | 	.quad 41
0x210: d6ffffffffffffff     | 	.quad -42
0x218: d5ffffffffffffff     | 	.quad -43
0x220: d4ffffffffffffff     | 	.quad -44
0x228: d3ffffffffffffff     | 	.quad -45
0x230: d2ffffffffffffff     | 	.quad -46
0x238: d1ffffffffffffff     | 	.quad -47
0x240: 3000000000000000     | 	.quad 48
0x248: 3100000000000000     | 	.quad 49
0x250: 3200000000000000     | 	.quad 50
0x258: 3300000000000000     | 	.quad 51
0x260: 3400000000000000     | 	.quad 52
0x268: 3500000000000000     | 	.quad 53
0x270: 3600000000000000     | 	.quad 54
0x278: 3700000000000000     | 	.quad 55
0x280: 3800000000000000     | 	.quad 56
0x288: 3900000000000000     | 	.quad 57
0x290: 3a00000000000000     | 	.quad 58
0x298: 3b00000000000000     | 	.quad 59
0x2a0: 3c00000000000000     | 	.quad 60
0x2a8: 3d00000000000000     | 	.quad 61
0x2b0: 3e00000000000000     | 	.quad 62
0x2b8: 3f00000000000000     | 	.quad 63
0x2c0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2d0:                      | 	.align 16
0x2d0:                      | Predest:
0x2d0: fadebc0000000000     | 	.quad 0xbcdefa
0x2d8:                      | dest:
0x2d8: abefcd0000000000     | 	.quad 0xcdefab
0x2e0: abefcd0000000000     | 	.quad 0xcdefab
0x2e8: abefcd0000000000     | 	.quad 0xcdefab
0x2f0: abefcd0000000000     | 	.quad 0xcdefab
0x2f8: abefcd0000000000     | 	.quad 0xcdefab
0x300: abefcd0000000000     | 	.quad 0xcdefab
0x308: abefcd0000000000     | 	.quad 0xcdefab
0x310: abefcd0000000000     | 	.quad 0xcdefab
0x318: abefcd0000000000     | 	.quad 0xcdefab
0x320: abefcd0000000000     | 	.quad 0xcdefab
0x328: abefcd0000000000     | 	.quad 0xcdefab
0x330: abefcd0000000000     | 	.quad 0xcdefab
0x338: abefcd0000000000     | 	.quad 0xcdefab
0x340: abefcd0000000000     | 	.quad 0xcdefab
0x348: abefcd0000000000     | 	.quad 0xcdefab
0x350: abefcd0000000000     | 	.quad 0xcdefab
0x358: abefcd0000000000     | 	.quad 0xcdefab
0x360: abefcd0000000000     | 	.quad 0xcdefab
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0:                      | Postdest:
0x4d0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x4d8:                      | .align 8
                            | # Run time stack
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
                            | 
0x558:                      | Stack:
